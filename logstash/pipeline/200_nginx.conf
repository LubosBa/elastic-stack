filter {
    
    if [event][module] == "nginx" {
        grok {
            patterns_dir => ["/config/patterns", "/opt/logstash/vendor/bundle/jruby/2.5.0/gems/logstash-patterns-core-4.1.2/patterns" ]
            match => {
                "[message]" => [
                    "%{IP:[client][ip]}%{SPACE}%{HOSTNAME:[url][domain]}%{SPACE}%{NOTSPACE}%{SPACE}\[%{HTTPDATE:[httpTimestamp]}\]%{SPACE}%{NOTSPACE}%{WORD:[http][request][method]}%{SPACE}%{URIPATH:[url][path]}%{URIPARAM:[url][query]}%{SPACE}%{NOTSPACE:[http][version]}%{NOTSPACE}%{SPACE}%{INT:[http][response][status_code]}%{SPACE}%{INT:[http][response][bytes]}%{SPACE}\"%{GREEDYDATA:[http][request][referrer]}\"%{SPACE}\"%{GREEDYDATA:[user_agent][original]}\"%{SPACE}rt=%{BASE10NUM:[nginx][request_time]}%{SPACE}uct=%{NOTSPACE}%{NOTSPACE:[nginx][upstream_connect_time]}%{NOTSPACE}%{SPACE}uht=%{NOTSPACE}%{NOTSPACE:[nginx][upstream_header_time]}%{NOTSPACE}%{SPACE}urt=%{NOTSPACE}%{NOTSPACE:[nginx][upstream_response_time]}%{NOTSPACE}%{SPACE}%{NOTSPACE:[tls][version]}%{SPACE}%{NOTSPACE:[tls][cipher]}",
                    "%{IP:[client][ip]}%{SPACE}%{HOSTNAME:[url][domain]}%{SPACE}%{NOTSPACE}%{SPACE}\[%{HTTPDATE:[httpTimestamp]}\]%{SPACE}%{NOTSPACE}%{WORD:[http][request][method]}%{SPACE}%{URIPATH:[url][path]}%{SPACE}%{NOTSPACE:[http][version]}%{NOTSPACE}%{SPACE}%{INT:[http][response][status_code]}%{SPACE}%{INT:[http][response][bytes]}%{SPACE}\"%{GREEDYDATA:[http][request][referrer]}\"%{SPACE}\"%{GREEDYDATA:[user_agent][original]}\"%{SPACE}rt=%{BASE10NUM:[nginx][request_time]}%{SPACE}uct=%{NOTSPACE}%{NOTSPACE:[nginx][upstream_connect_time]}%{NOTSPACE}%{SPACE}uht=%{NOTSPACE}%{NOTSPACE:[nginx][upstream_header_time]}%{NOTSPACE}%{SPACE}urt=%{NOTSPACE}%{NOTSPACE:[nginx][upstream_response_time]}%{NOTSPACE}%{SPACE}%{NOTSPACE:[tls][version]}%{SPACE}%{NOTSPACE:[tls][cipher]}"
                ]
            }
        }

        # Try to handle logging of TCP ingestions to webserver.
        if "_grokparsefailure" in [tags] {
            grok {
                match => {
                    "[message]" => "%{IP:[client][ip]}%{SPACE}%{HOSTNAME:[url][domain]}%{SPACE}%{NOTSPACE}%{SPACE}\[%{HTTPDATE:[httpTimestamp]}\]%{SPACE}\"%{GREEDYDATA:[url][path]}\"%{SPACE}%{INT:[http][response][status_code]}%{SPACE}%{INT:[http][response][bytes]}%{SPACE}\"%{GREEDYDATA:[http][request][referrer]}\"%{SPACE}\"%{GREEDYDATA:[user_agent][original]}\"%{SPACE}rt=%{BASE10NUM:[nginx][request_time]}%{SPACE}uct=%{NOTSPACE}%{NOTSPACE:[nginx][upstream_connect_time]}%{NOTSPACE}%{SPACE}uht=%{NOTSPACE}%{NOTSPACE:[nginx][upstream_header_time]}%{NOTSPACE}%{SPACE}urt=%{NOTSPACE}%{NOTSPACE:[nginx][upstream_response_time]}%{NOTSPACE}%{SPACE}%{NOTSPACE:[tls][version]}%{SPACE}%{NOTSPACE:[tls][cipher]}"
                }
                remove_tag => [ "_grokparsefailure" ]
            }
        }
        
        # GeoIP location
        geoip {
            source => "[client][ip]"
            target => "[client][geo]"
        }

        # Resolve useragents
        useragent {
            source => "[user_agent][original]"
            target => "[user_agent][tmp]"
        }

        # Resolve date.
        date {
            locale => "en"
            timezone => "Europe/Bratislava"
            match => [ "[httpTimestamp]", "dd/MMM/YYYY:HH:mm:ss Z" ]
            target => "[@timestamp]"
            remove_field => [ "[httpTimestamp]" ]

        }

        if [http][request][method] {
            mutate {
                lowercase => [ "[http][request][method]" ]
            }
        }

        # Remove starting ? from query strings, so it's according to ECS.
        if [url][query] {
            mutate {
                gsub => ["[url][query]", "^\?", "" ]
            }
        }

        # Cleanup User Agent tmp field, so it's according to ECS.
        if [user_agent][tmp] {
            mutate {
                add_field => {
                    "[user_agent][device][name]" => "%{[user_agent][tmp][device]}"
                    "[user_agent][name]" => "%{[user_agent][tmp][name]}"
                    "[user_agent][version]" => "%{[user_agent][tmp][major]}.%{[user_agent][tmp][minor]}.%{[user_agent][tmp][patch]}"
                    "[user_agent][os][os]" => "%{[user_agent][tmp][os]}"
                    "[user_agent][os][build]" => "%{[user_agent][tmp][build]}"
                    "[user_agent][os][os_minor]" => "%{[user_agent][tmp][os_minor]}"
                    "[user_agent][os][os_major]" => "%{[user_agent][tmp][os_major]}"
                    "[user_agent][os][os_name]" => "%{[user_agent][tmp][os_name]}"
                }

                remove_field => [ "[user_agent][tmp][device]", "[user_agent][tmp][name]", "[user_agent][tmp][major]", "[user_agent][tmp][minor]",
                    "[user_agent][tmp][patch]", "[user_agent][tmp][os]", "[user_agent][tmp][build]", "[user_agent][tmp][os_minor]", "[user_agent][tmp][os_major]",
                    "[user_agent][tmp][os_name]", "[user_agent][tmp]"
                ]
            }
        }

        # Cleanup Geo filed, so it's according to ECS.
        if [client][geo] {
            mutate {
                add_field => {
                    "[client][geo][region_iso_code]" => "%{[client][geo][region_code]}"
                    "[client][geo][country_iso_name]" => "%{[client][geo][country_code2]}"
                }

                remove_field => [ "[client][geo][ip]", "[client][geo][latitude]", "[client][geo][longitude]", "[client][geo][country_code2]" ]
            }
        }

        # Cleanup path from File Import, so it's according to ECS.
        if [path] {
            mutate {
                add_field => {
                    "[file][path]" => "%{[path]}"
                }

                remove_field => [ "[path]" ]
            }
        }

        # Cleanup host, so it's according to ECS.
        if [host] {
            mutate {
                rename => {
                    "[host]" => "[hostTmp]"
                }

                add_field => {
                    "[host][hostname]" => "%{[hostTmp]}"
                }

                remove_field => [ "[hostTmp]" ]
            }
        }

        # Cleanup TLS data, so it's according to ECS.
        if [tls] {

            mutate {
                rename => {
                    "[tls][version]" => "[tls][versionRaw]"
                }
            }

            if [tls][versionRaw] != "-" {
                grok {
                    match => {
                        "[tls][versionRaw]" => "%{NOTSPACE:[tls][version_protocol]}v%{BASE10NUM:[tls][version]}"
                    }
                    remove_field => [ "[tls][versionRaw]" ]
                }
            } else if [tls][versionRaw] == "-" {
                mutate {
                    add_field => {
                        "[tls][version_protocol]" => "%{[tls][versionRaw]}"
                        "[tls][version]" => "%{[tls][versionRaw]}"
                    }
                    remove_field => [ "[tls][versionRaw]" ]
                }
            }

            mutate {
                lowercase => [ "[tls][version_protocol]" ]
            }
        }
    
        # Cleanup nginx BE stat data.
        if [nginx][upstream_connect_time] == "-" {
            mutate {
                remove_field => [ "[nginx][upstream_connect_time]" ]
            }
        }

        if [nginx][upstream_header_time] == "-" {
            mutate {
                remove_field => [ "[nginx][upstream_header_time]" ]
            }
        }

        if [nginx][upstream_response_time] == "-" {
            mutate {
                remove_field => [ "[nginx][upstream_response_time]" ]
            }
        }

        # Add event data as per ECS requirement.
        mutate {
            add_field => {
                "[event][kind]" => "event"
                "[event][category]" => "web"
                "[ecs][version]" => "1.5.0"
            }
        }

        # Final event cleanup.
        if "_grokparsefailure" not in [tags] {
            mutate {
                remove_field => [ "[message]", "[@version]" ]
            }
        }

        # Fingerprint events
        fingerprint {
            method => "MURMUR3"
            concatenate_sources => true
            source => [ "[client][ip]", "[@timestamp]", "[nginx][request_time]" ]
            target => "[event][hash]"
        }
    }
}